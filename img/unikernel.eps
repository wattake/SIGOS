%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 668.000000 283.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 668 283
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 668 283
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /H put
dup 34 /y put
dup 35 /p put
dup 36 /e put
dup 37 /r put
dup 38 /v put
dup 39 /i put
dup 40 /s put
dup 41 /o put
dup 42 /A put
dup 43 /period put
dup 44 /U put
dup 45 /n put
dup 46 /k put
dup 47 /l put
dup 48 /space put
dup 49 /u put
dup 50 /a put
dup 51 /b put
dup 52 /d put
dup 53 /t put
dup 54 /h put
dup 55 /c put
dup 56 /m put
dup 57 /f put
dup 58 /C put
dup 59 /O put
dup 60 /S put
dup 61 /V put
dup 62 /F put
dup 63 /T put
dup 64 /R put
dup 65 /M put
dup 66 /L put
dup 67 /W put
dup 68 /I put
dup 69 /P put
dup 70 /N put
dup 71 /E put
dup 72 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 41 dict dup begin
/.notdef 0 def
/space 1 def
/period 2 def
/A 3 def
/C 4 def
/D 5 def
/E 6 def
/F 7 def
/H 8 def
/I 9 def
/L 10 def
/M 11 def
/N 12 def
/O 13 def
/P 14 def
/R 15 def
/S 16 def
/T 17 def
/U 18 def
/V 19 def
/W 20 def
/a 21 def
/b 22 def
/c 23 def
/d 24 def
/e 25 def
/f 26 def
/h 27 def
/i 28 def
/k 29 def
/l 30 def
/m 31 def
/n 32 def
/o 33 def
/p 34 def
/r 35 def
/s 36 def
/t 37 def
/u 38 def
/v 39 def
/y 40 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4203806 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2879808DC5A083223AE2D7E50DC0C0DA86C3CA6A86C16D41F3F024A722A39AE8C78F23FA0319150930280E995F1E637F4D9435F5F395562E09B2D22ECA1F8C026DD80068AF78423672557C36A1D744177AD7E6DB5E05699B91B8ABF8ED98D01FBA0E54F0A3D551205E7D5DAB8DC00FF9779294EE2DED5731F9989E9B66618013B0072DAF0F9471D0F949130DABE82AD503DCB5E7370664A83E8B94169FDF5A0B0E5CEE4AE0306FB93957B88B9A9933C97489C9328738A00718A1BE96EDA4622B64BE7413E2D271411BC079D041C447CCC46CC97FDBFBB1AC6E20877B8B501BC1E18BCCEF3D7F8410014A0F75D5B3EA4BDFBA4DB4283115EF51115B0B5A6B4C676804F379130051BC04852A3ABDB69941B0AAC08F952EACCEFC57C1AEDA48C6971F8F2B7C4260B044EEA1C881F3A476FA8C37680A1CA77AFE4D977C3972D2EA4139E029DDB9F8F431E2374D67F6C32EB45E2889A831038B44EED89E40ECE54711391DE951E4E77FBFF2B2EAD0F97FE31A13B83158819018EF3698B7BFBAD6FC416A4E3B523C34F215EA726BAB94125D6C6A129D890AFB413EDCD04DC0B7721028CD666BDAA940DB3DDA746E470F7DDF181AD0547C41EC8F39FA27B0BB919B02249871819E3410D356D1259284E8F93823477DCE0723E2EFB9EE62895986DC338E0135134D2C1457D832E584D7EE597DA9E75A6C799C548136405862070B666CDCAB9973B03254DFED5B54BC256C8BA354EF04506CC3C6C92AD1E8733445053DC86BE1444EA
84567BE3C38B9C7EB71ED01AECE22850CD3903F72AF41BE5EBA995831818E59A2259093538495B8530F176970DF1D513B540A5EDD19DE6A8A1F672C917FDC52ADCF55ABE4D020A1B3061222E25DC9AECF93D80F42AA0D247E52477BCC6B4FAB2737CB203C016289226B8EA8196F9FA76F0F3395D312E8E631B327B953B368D96AC3E1D1353F3B4321C34E2A0D3DD6B9351A8938BED3EF3A7E52A3E1BE148D25988ADABC25E306686C855214FC739A023B59C0C053250F159577568292AEF397F2364D38E863BB26781CEC685E017E210C86F53E207D6709A547E4108B0FA9DCC319FC0FE456E098B6202E3539F19541F245335A89D9D4450CF71642B2B1BF5B13204843C2BD21FD11E13FD5DEC3BF4415EC54BCC6C1FF37914196DF5CDBEDC141ECB75982BAF53991BB84A96B77A0E40F3091BB7F35DB61C4EADCCB3553A92474A1BF1D231120D2D308D34A10A8F8291FDBB46CEB1D5D30B1DF55ED9ED73DED92E070D93BFA72567BF69083799DDE703110CEA13C93F65DA6B5D0739825D6C48DFCC5E8D1475874634E672E02DBA02716C189828CF755E03D840944B29443082AFFD26B197B5B4F4AA2136DF36334E3AB954FBCB6291377F4E75FF724D04DF27DBE68B3FD902E083E6A227FAA5B1842A81FD0215CF440A6B120727AB3DB18113F07B75B7D1128DAC1708C355506948FD9ABF6530F909A733BFE929F0479D9E822B8E66E110124DB746CDE6456CFA02EB30E63C509FE3F06B31DD42C72994F7E1A694A5A4B39BDA862E3C9E09F19E1693D9F4FC6DDCC65562F5286CB74FCDF9AA03AC34A72EE0F740631A07C98AAF1293444A360AB0E3825CEE921BF2AB137DC220227E3C80D660BCBFC0494561EC74DCD1BCC41791EA826764B5B755B1878340B6DEAD48E2E9F68B26352565BB747A95B08F15E56101B18354BE941DE83C08D15A9A1DE33383AB7B2FF4BF99AE3E1BD1334C0D16C6D95D4CE08F6DB2E29EFA14B8BB5952E454167545F184E47DEB8BAE71F46F9575FA8BF60AEF5D23AF0818A8D33408C21D81C0D7AE40073FE06D96B97854380D5430B691F94B82F372E1FA088019F937A3ED2B476A946D57B9EC53F5C8DEC1084D12D38049341419C7FBC23763A8BE1A4795DECC31538D7A61DE4569AC1723BCC4CCA5A3170DBE8B25F4735FEB2BDD47CF379103A7FE13A95214128666C94E630F1664F6132641DE27DFEA803D5D4DB61C57352C5483511821684A412200C4057C13C44E5FE6CA8A52DE9B8F3FAFBBD9818F66E266226F187282694D97A404066F16F2B7FA3C0F1C761FB5CA62EC447F0F2CB492A500440ADB03F53E0D2ADEF284795D74D7D1521F82AB750E8243E7AFB2949E350340F213423F3089810174318BD1614421B6A3475D76E512D2C3C443F81F5E34E4CE08C8409D078E782C6A6E9083254E6DF199AA01D9AC28

6CBD31A6EE0CADC30A5982431B519DBD8B795400CB67414B7D7D725D9E5EC2E1FE7B49881CDDEE8224090D8136ADEE004B8CD9568EA068DD25A0E0CD002C0C6D2BE2EF242C5E4D5DC2624B3E73C74585B48C078840FC48D4AB3D803ED02780416E07EE05974602F5903A6240AA5B9AD4543B1C07DA194498C2D23365C521A284923E5AAC67ECFCD140503933EC6816A2A576E083153D293419A5455B42AE4DE8F1C5337BFC132277A9ABFF25F6D1458FBD4B0ACCF302B3850677BA80A7305D70BC09062D01D456C6DC3E5F7E0842F0C68BCA40E0E1A65D8E13B149747AA964ED2687EEE5A969C30CB09EEFA55D80A9330CC72A78E58891D6D1EFBCC7BA816159028D4D92C83052ECDBE7134E7DFA162883602EAA0F5A125704A7DC24752FF97262BF6EE0C0812F2923D9DC7C99E62DFC4521407EC3215C6495603C9BA26989BCE3903D1BA0B4FAFDC84AB378C08E04F51BFE8376C85E83B4177C337F236779C44B05B7060DB4CC0F5FA4CD344B8611946CEC5CBD6A465B4AD73D77DB409502E6074899071CC4CCBC24AA67569C84F4B0995AFAFF6F27E15CFD5075D1556391608FAE74CD1D440F1CB9DC6F16EE9061635D1C32AA8C4096336EBA1713098D8EEC34B568967EEAB11C2880D066F79D548657CACF42B6FC47A63B865B89DA16F3C0B7F6A5FBC9331642B28F0EA49D6729F7475C3748E39E95BCAFC9695C694A0857FBF96E1F70DAFDDE5557BB8AD2E34191692310F3C3E021436945694FA09481FFE536864EC17B8BBF54A5C15B4408C31FB6B07232120A2C4B57760776BDFC831151D77558283EEDE41E7B6A4124F4988E8FD6B0443274084C6F2CB7666CF2916B8A9D0064E9E7145A66EDEBF5C62FE99FAE62A4DBD5D3E64762D7AAB3FA1227AA2064903D72AB553F946111837CA2C6CF38164C01CF0D55D0D89CFA98FB9F422CF00FF5879C7E0019D105BFF9DE8BA3942BC18E858EBE083C1D2F66043EFE845248904F231800CA424C3E4C325FD8BBDA1523EC2E284656B7909A8325255423667150EC4ADC263B3BC4B194C2056DAB257E8FD81A3F3E1353D84EC5A1A9DDD3FE477DDDF8A8D34AE16596933318D93A23E3BE733BE925D5BFFE9B8534F68B32274F74F377967DE52F1EA6C2F3AC08F8C36CDEC3E5FBBC1DFD2241D197CD833BA127F104F0BC1D2161DFA1F2ED8BC9C481F1B42E8D54C0A993C62F9CE792882C4618F3FD17614EECF521FDC95CF614F03BCA17560EC744CD6DF1954EC0E3CE09CC733DCC0F51D8EC6543FA6C63F347C1F3C5F9A01097B75B49AD0450C1DABD5C4B05B96110C95316E1363F3AA8C819ACBFF6E7B1CA1EE000904E382E7C5969044DC2419CFF5C440215F2E6AE42854EBAA0DAD6E2C61320352986A35A40A3B4C23A422DBF4844DEF1B3196296055DAAD9C97C072BED9FDB337A2BA26EE5F8490508
A0A1DED49BFE6ADEC2755075A5D53689850484B7555E261A234B621A420821396CF2300268AB1F66F8A3529DA88A51F5BDC5CE694E93F058B5FBD87E252FAFE85AB5A9EFA1FC7F2812627BD06705E5F2DED5A5F4A203CC783813775CBA582EB2031D2BD045FC14CA4CC2C65C7F3DD5A4228A326DC1753DB5A430417B46939985D93640C60A0BA2D286D63E95C516CCA4C606F8F484D42C1DA4FAEB3F2D88C85C1C525CFADCF09718C27C26B146590D977D7A77B55D10213141C4F4451A62745E367BD075C8B4FB9D69A55CADA8E7F2A44E299C64CC2A6EEEB3162216158D3FD26EB2C52BC99C9B1107E97066E105A028D1120FA161E2EBED54D9399AC2416893A40589328063941482BAB7354B5CC6BF17249D32E84ECB0FD97248C33F113CF5AED84CD1BAC3188A37C28AE9837D135B5967DE78406193F936D54245E7AED4F28FB0BCCB889381B2AEB6C419A87E8205CCDF8A4B7E4F80BA93C5744FC714150029139BED718F6D2530374ED15C8003DBD6B50584884DEA32852626B99E9BAC1287E94F6AD2E527BABDE85BCDC304E07AABA061606C43CF79EEFE812429A3E8345DADDA4D6C309DCEA38A2E949FB63C9F46102935B617E145BB0C1809A77B1361784826DC3C7DAF4CC5D859AF972594E8BCB425DCFA17A4E58FDEA4475C301BE57A45DE94EE76DD12AA0F94AC3973F68A30DFF4C1116CAB28FAC1E78DB40C8090003E7F5EFB049A27564FAAA13A8E7D6E4786713B35357A8D3FD64774625FCFF2596AF00C67373F2DE420D943A19B31D61243EECC517FB2F3C67527C4BFED48B741E890FB72C2E733DB2AEF3D4A34EA87C6156BBE98B560E07C2AE29E21CFB011C4965EA4191C5635EB07359B22D79545A58361E2822C04BABBA77AB88C8B1D2103997C3BBBDEF2F264043911D70D8D327CB07454C9A449FA963CDA840F0772112A4DBF9B6B0485E3D20DB012FC95DB8BCB41CAFD1593260EF25F6BCDCB0A447FEE94CAE57AD1FB90C109B4C527DD1C0AE386346122C7E41B56609D5F338F36CA9ED3A4AF1DAAC3FB7C40C737C62DECED81DFAA825FD9B2282DC6BF25A3C4C04F6CFE08128BD3D30FC57FF041442D4DCC576595571B015C6790D0179EEACEA70C7970C9BF5E4741D9EA92F2A4AD0AD8FCB29CDB355574602AA8C6B4EB90CCECC102676D705301872C1E4A631A6EF6ABAB36988EF1E5CED3C1E8904B6F266B9AE1610D9678A523A454C7015D4A95A25FEC88F6B88FF772EB71749B7C0F6B906A3B62626B8424CD67BF5C5EC3BAEBE22CC1255E33CE17E218AF655F5248620EAB4E9B711B4E065C31ADB9436E92E8451442D8CCA1A610AFF331633D54C15A2775E3918F05F608D52655301B9861736A412DEB21117296117B48AE57498BF9F7348F269E9D1EF0538292181713CBFC31BC436408C96FD36DDA108FA7E023EE7816BF

45B64DAC93B4CC37DB3DD5D126590B41ADC9E262797765C2CB08808DC8E8DD53FE250941D36DF5304BD6CEFDA2B44F96E022987FE99790AAD6DC4708610E664CF322AF8615650BAF671E9253402E418631AF91
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 668 283 rc
-196 414 m
1353 414 l
1353 -520 l
-196 -520 l
h
-196 414 m
f
0.64705884 0.64705884 0.64705884 sc
2.4251957 59.669292 m
399.27557 59.669292 l
399.27557 2.9763803 l
2.4251957 2.9763803 l
h
2.4251957 59.669292 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
198.4252 354.33072 m
595.27557 354.33072 l
595.27557 411.02362 l
198.4252 411.02362 l
h
198.4252 354.33072 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 200.85039 31.322838 cm
/F1.1[ 30 0 0 -30 0 0]sf
-72.209999 11.080002 m
(!"#$%&'\(\)%)[ 21.660000 15.000000 17.790000 16.110000 9.990000 15.000000 6.660000 15.000000 17.220000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
32.929134 280.77167 m
159.00787 280.77167 l
171.15814 280.77167 181.00787 270.92191 181.00787 258.77167 c
181.00787 217.73228 l
181.00787 205.58202 171.15814 195.73228 159.00787 195.73228 c
32.929134 195.73228 l
20.778868 195.73228 10.929132 205.58202 10.929132 217.73228 c
10.929132 258.77167 l
10.929132 270.92191 20.778868 280.77167 32.929134 280.77167 c
h
32.929134 280.77167 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
228.92914 133.22835 m
355.00787 133.22835 l
367.15814 133.22835 377.00787 143.07808 377.00787 155.22835 c
377.00787 196.26772 l
377.00787 208.41798 367.15814 218.26772 355.00787 218.26772 c
228.92914 218.26772 l
216.77887 218.26772 206.92914 208.41798 206.92914 196.26772 c
206.92914 155.22835 l
206.92914 143.07808 216.77887 133.22835 228.92914 133.22835 c
h
228.92914 133.22835 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 95.968506 238.25197 cm
-31.68 11.080002 m
(*##+)[ 19.440000 17.790000 17.790000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
242.69292 280.77167 m
368.77164 280.77167 l
380.92191 280.77167 390.77164 270.92191 390.77164 258.77167 c
390.77164 217.73228 l
390.77164 205.58202 380.92191 195.73228 368.77164 195.73228 c
242.69292 195.73228 l
230.54265 195.73228 220.69292 205.58202 220.69292 217.73228 c
220.69292 258.77167 l
220.69292 270.92191 230.54265 280.77167 242.69292 280.77167 c
h
242.69292 280.77167 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
438.6929 133.22835 m
564.77167 133.22835 l
576.92194 133.22835 586.77167 143.07808 586.77167 155.22835 c
586.77167 196.26772 l
586.77167 208.41798 576.92194 218.26772 564.77167 218.26772 c
438.6929 218.26772 l
426.54263 218.26772 416.6929 208.41798 416.6929 196.26772 c
416.6929 155.22835 l
416.6929 143.07808 426.54263 133.22835 438.6929 133.22835 c
h
438.6929 133.22835 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 305.73227 238.25197 cm
-31.68 11.080002 m
(*##+)[ 19.440000 17.790000 17.790000 0.000000 ] xS
1 0 0 -1 537.77954 96.350395 cm
/F1.1[ 21 0 0 -21 0 0]sf
-125 -29.175995 m
(,-'.$%-$/0%1-\(02\(020/'3%2%"0)[ 15.162000 11.676000 4.662000 10.899000 11.277000 7.371000 11.676000 11.277000 4.662000 5.838000 6.993000 11.676000 11.676000 10.500000 5.838000 11.277000 10.500000 5.838000 11.277000 5.838000 4.662000 4.662000 12.453000 6.993000 11.277000 6.993000 10.500000 0.000000 ] xS
-125 -4.5879974 m
(2-400/'-.\(056$0\)-/")[ 11.277000 11.676000 12.453000 5.838000 5.838000 4.662000 4.662000 11.676000 10.899000 10.500000 5.838000 6.615000 11.676000 11.277000 5.838000 12.054000 11.676000 4.662000 0.000000 ] xS
-125 20 m
(7\)8#\)-$-5\(0-$7$\(\(2%"0)[ 11.277000 12.054000 17.913000 12.453000 12.054000 11.676000 11.277000 11.676000 6.615000 10.500000 5.838000 11.676000 11.277000 11.277000 11.277000 10.500000 10.500000 11.277000 6.993000 10.500000 0.000000 ] xS
-125 44.587997 m
(9\)%056$02##\()[ 6.216000 12.054000 6.993000 5.838000 6.615000 11.676000 11.277000 5.838000 11.277000 12.453000 12.453000 0.000000 ] xS
1 0 0 -1 514.94489 200.22047 cm
-105 -4.5879974 m
(:2//\(056$0;<091-75'\)-\()[ 15.162000 11.277000 4.662000 4.662000 10.500000 5.838000 6.615000 11.676000 11.277000 5.838000 15.960000 13.608000 5.838000 6.216000 11.676000 11.676000 11.277000 6.615000 4.662000 12.054000 11.676000 0.000000 ] xS
-105 20 m
(2\(091-75'\)-072//\()[ 11.277000 10.500000 5.838000 6.216000 11.676000 11.676000 11.277000 6.615000 4.662000 12.054000 11.676000 5.838000 11.277000 11.277000 4.662000 4.662000 0.000000 ] xS
/Cs1 SC
0.85490197 0.85490197 0.85490197 sc
CM
10.425196 175.88977 m
76.629921 175.88977 l
81.048195 175.88977 84.629921 172.30804 84.629921 167.88977 c
84.629921 141.37009 l
84.629921 136.9518 81.048195 133.37009 76.629921 133.37009 c
10.425196 133.37009 l
6.0069175 133.37009 2.4251957 136.9518 2.4251957 141.37009 c
2.4251957 167.88977 l
2.4251957 172.30804 6.0069175 175.88977 10.425196 175.88977 c
h
10.425196 175.88977 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
206.4252 238.11023 m
272.62991 238.11023 l
277.04819 238.11023 280.62991 241.69196 280.62991 246.11023 c
280.62991 272.62991 l
280.62991 277.04819 277.04819 280.62991 272.62991 280.62991 c
206.4252 280.62991 l
202.00691 280.62991 198.4252 277.04819 198.4252 272.62991 c
198.4252 246.11023 l
198.4252 241.69196 202.00691 238.11023 206.4252 238.11023 c
h
206.4252 238.11023 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 43.527557 154.62993 cm
-19.2465 7.7060013 m
(=><)[ 12.831000 12.054000 0.000000 ] xS
/Cs1 SC
0.85490203 0.85490203 0.85490203 sc
CM
119.01221 175.88977 m
168.00818 175.88977 l
172.42645 175.88977 176.00818 172.30804 176.00818 167.88977 c
176.00818 79.007874 l
176.00818 74.5896 172.42645 71.007874 168.00818 71.007874 c
119.01221 71.007874 l
114.59393 71.007874 111.01221 74.5896 111.01221 79.007874 c
111.01221 167.88977 l
111.01221 172.30804 114.59393 175.88977 119.01221 175.88977 c
h
119.01221 175.88977 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
315.01221 238.11023 m
364.00818 238.11023 l
368.42645 238.11023 372.00818 241.69196 372.00818 246.11023 c
372.00818 334.99213 l
372.00818 339.4104 368.42645 342.99213 364.00818 342.99213 c
315.01221 342.99213 l
310.59393 342.99213 307.01221 339.4104 307.01221 334.99213 c
307.01221 246.11023 l
307.01221 241.69196 310.59393 238.11023 315.01221 238.11023 c
h
315.01221 238.11023 m
S
/Cs2 SC
0 sc
0 i
0 1 1 0 142.74016 122.6414 cm
/F1.1[ 20 0 0 -20 0 0]sf
-31.120001 -4.5599976 m
(?6%$24)[ 11.480000 11.120000 6.300000 10.740000 10.740000 0.000000 ] xS
-31.49 19 m
(<76$4+)[ 12.960000 10.740000 11.120000 10.740000 11.860000 0.000000 ] xS
/Cs1 SC
0.85490203 0.85490203 0.85490203 sc
CM
10.425196 110.69292 m
76.629921 110.69292 l
81.048195 110.69292 84.629921 107.11119 84.629921 102.69292 c
84.629921 79.007874 l
84.629921 74.5896 81.048195 71.007874 76.629921 71.007874 c
10.425196 71.007874 l
6.0069175 71.007874 2.4251957 74.5896 2.4251957 79.007874 c
2.4251957 102.69292 l
2.4251957 107.11119 6.0069175 110.69292 10.425196 110.69292 c
h
10.425196 110.69292 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
206.4252 303.3071 m
272.62991 303.3071 l
277.04819 303.3071 280.62991 306.88879 280.62991 311.3071 c
280.62991 334.99213 l
280.62991 339.4104 277.04819 342.99213 272.62991 342.99213 c
206.4252 342.99213 l
202.00691 342.99213 198.4252 339.4104 198.4252 334.99213 c
198.4252 311.3071 l
198.4252 306.88879 202.00691 303.3071 206.4252 303.3071 c
h
206.4252 303.3071 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 43.527557 90.850395 cm
/F1.1[ 21 0 0 -21 0 0]sf
-35.973 7.7060013 m
(@*A><)[ 14.385000 13.608000 18.291000 12.054000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -196 414 cm
257.77441 230.27373 m
260.38919 226.10423 l
S
0 i
CM
68.639503 194.67329 m
63.972775 192.8784 l
64.389191 187.89577 l
69.055916 189.69067 l
h
68.639503 194.67329 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
264.6395 219.32671 m
259.97278 221.1216 l
260.38919 226.10423 l
265.05591 224.30933 l
h
264.6395 219.32671 m
S
CM
57.524113 176.94876 m
62.190842 178.74365 l
61.774426 183.72627 l
57.107697 181.93138 l
h
57.524113 176.94876 m
f
1 0 0 -1 -196 414 cm
253.52411 237.05124 m
258.19083 235.25635 l
257.77441 230.27373 l
253.1077 232.06862 l
h
253.52411 237.05124 m
S
1 J
1 j
0.60000002 i
314.25452 229.56406 m
313.11563 226.8139 l
S
0 i
CM
114.05479 194.57739 m
112.81348 189.73393 l
117.11564 187.1861 l
118.35695 192.02957 l
h
114.05479 194.57739 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
310.05481 219.42261 m
308.81348 224.26607 l
313.11563 226.8139 l
314.35696 221.97043 l
h
310.05481 219.42261 m
S
CM
121.31536 177.04466 m
122.55668 181.88812 l
118.25452 184.43594 l
117.01321 179.59248 l
h
121.31536 177.04466 m
f
1 0 0 -1 -196 414 cm
317.31537 236.95534 m
318.55667 232.11188 l
314.25452 229.56406 l
313.01321 234.40752 l
h
317.31537 236.95534 m
S
1 J
1 j
0.60000002 i
239.52756 289.87991 m
239.52756 294.0571 l
S
0 i
CM
43.527557 111.94292 m
46.527557 115.94292 l
43.527557 119.94292 l
40.527557 115.94292 l
h
43.527557 111.94292 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
239.52756 302.0571 m
242.52756 298.0571 l
239.52756 294.0571 l
236.52756 298.0571 l
h
239.52756 302.0571 m
S
CM
43.527557 132.12009 m
40.527557 128.12009 l
43.527557 124.12008 l
46.527557 128.12009 l
h
43.527557 132.12009 m
f
1 0 0 -1 -196 414 cm
239.52756 281.87991 m
236.52756 285.87991 l
239.52756 289.87991 l
242.52756 285.87991 l
h
239.52756 281.87991 m
S
0.85490203 0.85490203 0.85490203 sc
CM
206.01575 175.88977 m
272.22046 175.88977 l
276.63873 175.88977 280.22046 172.30804 280.22046 167.88977 c
280.22046 141.37009 l
280.22046 136.9518 276.63873 133.37009 272.22046 133.37009 c
206.01575 133.37009 l
201.59747 133.37009 198.01575 136.9518 198.01575 141.37009 c
198.01575 167.88977 l
198.01575 172.30804 201.59747 175.88977 206.01575 175.88977 c
h
206.01575 175.88977 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
402.01575 238.11023 m
468.22046 238.11023 l
472.63873 238.11023 476.22046 241.69196 476.22046 246.11023 c
476.22046 272.62991 l
476.22046 277.04819 472.63873 280.62991 468.22046 280.62991 c
402.01575 280.62991 l
397.59747 280.62991 394.01575 277.04819 394.01575 272.62991 c
394.01575 246.11023 l
394.01575 241.69196 397.59747 238.11023 402.01575 238.11023 c
h
402.01575 238.11023 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 239.1181 154.62993 cm
-24.507 7.7060013 m
(BCDE)[ 10.521000 19.446000 5.439000 0.000000 ] xS
/Cs1 SC
0.85490203 0.85490203 0.85490203 sc
CM
206.01575 110.69292 m
272.22046 110.69292 l
276.63873 110.69292 280.22046 107.11119 280.22046 102.69292 c
280.22046 79.007874 l
280.22046 74.5896 276.63873 71.007874 272.22046 71.007874 c
206.01575 71.007874 l
201.59747 71.007874 198.01575 74.5896 198.01575 79.007874 c
198.01575 102.69292 l
198.01575 107.11119 201.59747 110.69292 206.01575 110.69292 c
h
206.01575 110.69292 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
402.01575 303.3071 m
468.22046 303.3071 l
472.63873 303.3071 476.22046 306.88879 476.22046 311.3071 c
476.22046 334.99213 l
476.22046 339.4104 472.63873 342.99213 468.22046 342.99213 c
402.01575 342.99213 l
397.59747 342.99213 394.01575 339.4104 394.01575 334.99213 c
394.01575 311.3071 l
394.01575 306.88879 397.59747 303.3071 402.01575 303.3071 c
h
402.01575 303.3071 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 239.1181 90.850395 cm
/F1.1[ 18 0 0 -18 0 0]sf
-34.497002 6.2480011 m
(FG?HG=)[ 12.996000 10.998000 10.332000 12.672000 10.998000 0.000000 ] xS
/Cs1 SC
0.85490203 0.85490203 0.85490203 sc
CM
299.55905 175.88977 m
317.5748 175.88977 l
321.99307 175.88977 325.5748 172.30804 325.5748 167.88977 c
325.5748 79.007874 l
325.5748 74.5896 321.99307 71.007874 317.5748 71.007874 c
299.55905 71.007874 l
295.14078 71.007874 291.55905 74.5896 291.55905 79.007874 c
291.55905 167.88977 l
291.55905 172.30804 295.14078 175.88977 299.55905 175.88977 c
h
299.55905 175.88977 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
495.55905 238.11023 m
513.57483 238.11023 l
517.9931 238.11023 521.57483 241.69196 521.57483 246.11023 c
521.57483 334.99213 l
521.57483 339.4104 517.9931 342.99213 513.57483 342.99213 c
495.55905 342.99213 l
491.14078 342.99213 487.55905 339.4104 487.55905 334.99213 c
487.55905 246.11023 l
487.55905 241.69196 491.14078 238.11023 495.55905 238.11023 c
h
495.55905 238.11023 m
S
0 i
0.85490203 0.85490203 0.85490203 sc
CM
342.94922 175.88977 m
391.94519 175.88977 l
396.36346 175.88977 399.94519 172.30804 399.94519 167.88977 c
399.94519 79.007874 l
399.94519 74.5896 396.36346 71.007874 391.94519 71.007874 c
342.94922 71.007874 l
338.53094 71.007874 334.94922 74.5896 334.94922 79.007874 c
334.94922 167.88977 l
334.94922 172.30804 338.53094 175.88977 342.94922 175.88977 c
h
342.94922 175.88977 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
538.94922 238.11023 m
587.94519 238.11023 l
592.36346 238.11023 595.94519 241.69196 595.94519 246.11023 c
595.94519 334.99213 l
595.94519 339.4104 592.36346 342.99213 587.94519 342.99213 c
538.94922 342.99213 l
534.53094 342.99213 530.94922 339.4104 530.94922 334.99213 c
530.94922 246.11023 l
530.94922 241.69196 534.53094 238.11023 538.94922 238.11023 c
h
538.94922 238.11023 m
S
/Cs2 SC
0 sc
0 i
0 1 1 0 366.67715 122.6414 cm
/F1.1[ 20 0 0 -20 0 0]sf
-25.389999 -4.5599976 m
(A$8+)[ 17.420000 10.740000 17.060000 0.000000 ] xS
-39.619999 19 m
(*//\)725\)%)[ 12.960000 4.440000 4.440000 11.480000 10.740000 10.740000 6.300000 11.480000 0.000000 ] xS
0 1 1 0 310.25195 124.04514 cm
/F1.1[ 22 0 0 -22 0 0]sf
-33 7.6920013 m
(?DAG@)[ 12.628000 5.698000 19.162000 13.442000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -196 414 cm
531.26056 230.67705 m
528.96948 226.4151 l
S
0 i
CM
329.18152 194.63129 m
328.43311 189.68762 l
332.96945 187.5849 l
333.7179 192.52856 l
h
329.18152 194.63129 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
525.18152 219.36871 m
524.43311 224.31238 l
528.96948 226.4151 l
529.7179 221.47144 l
h
525.18152 219.36871 m
S
CM
339.04849 176.27657 m
339.79694 181.22023 l
335.26056 183.32295 l
334.51215 178.37927 l
h
339.04849 176.27657 m
f
1 0 0 -1 -196 414 cm
535.04852 237.72343 m
535.79694 232.77977 l
531.26056 230.67705 l
530.51215 235.62073 l
h
535.04852 237.72343 m
S
1 J
1 j
0.60000002 i
503.04376 228.86305 m
503.01047 227.51489 l
S
0 i
CM
306.81302 194.48267 m
303.91266 190.40984 l
307.01047 186.48511 l
309.91083 190.55794 l
h
306.81302 194.48267 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
502.81302 219.51733 m
499.91266 223.59016 l
503.01047 227.51489 l
505.91083 223.44206 l
h
502.81302 219.51733 m
S
CM
307.24124 177.13939 m
310.14157 181.21222 l
307.04376 185.13695 l
304.1434 181.06412 l
h
307.24124 177.13939 m
f
1 0 0 -1 -196 414 cm
503.24124 236.86061 m
506.14157 232.78778 l
503.04376 228.86305 l
500.1434 232.93588 l
h
503.24124 236.86061 m
S
1 J
1 j
0.60000002 i
457.81738 230.87524 m
462.0972 225.5027 l
S
0 i
CM
271.08182 194.75458 m
266.24304 193.49518 l
266.0972 188.4973 l
270.936 189.75671 l
h
271.08182 194.75458 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
467.08182 219.24542 m
462.24304 220.50482 l
462.0972 225.5027 l
466.936 224.24329 l
h
467.08182 219.24542 m
S
CM
256.83276 176.86746 m
261.67154 178.12688 l
261.81738 183.12476 l
256.97858 181.86534 l
h
256.83276 176.86746 m
f
1 0 0 -1 -196 414 cm
452.83276 237.13254 m
457.67154 235.87312 l
457.81738 230.87524 l
452.97858 232.13466 l
h
452.83276 237.13254 m
S
1 J
1 j
0.60000002 i
435.1181 289.87991 m
435.1181 294.0571 l
S
0 i
CM
239.1181 111.94292 m
242.1181 115.94292 l
239.1181 119.94292 l
236.1181 115.94292 l
h
239.1181 111.94292 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
435.1181 302.0571 m
438.1181 298.0571 l
435.1181 294.0571 l
432.1181 298.0571 l
h
435.1181 302.0571 m
S
CM
239.1181 132.12009 m
236.1181 128.12009 l
239.1181 124.12008 l
242.1181 128.12009 l
h
239.1181 132.12009 m
f
1 0 0 -1 -196 414 cm
435.1181 281.87991 m
432.1181 285.87991 l
435.1181 289.87991 l
438.1181 285.87991 l
h
435.1181 281.87991 m
S
3 w
1 J
1 j
0.60000002 i
235.27559 201.78136 m
229.40141 206.81636 l
220.53558 214.41565 215.43307 225.50963 215.43307 237.18661 c
215.43307 295.91101 l
S
0 J
0 j
0 i
215.43307 307.11102 m
215.43307 295.91101 l
219.63307 295.91101 m
215.43307 307.11102 l
211.23306 295.91101 l
S
1 J
1 j
0.60000002 i
479.05511 206.92914 m
469.76605 223.95906 l
466.56122 229.83461 464.8819 236.42038 464.8819 243.11314 c
464.8819 295.91101 l
S
0 J
0 j
0 i
464.8819 307.11102 m
464.8819 295.91101 l
469.08188 295.91101 m
464.8819 307.11102 l
460.68188 295.91101 l
S
ep
end
%%Trailer
%%EOF
