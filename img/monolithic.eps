%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 656.000000 283.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 656 283
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 656 283
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /H put
dup 34 /y put
dup 35 /p put
dup 36 /e put
dup 37 /r put
dup 38 /v put
dup 39 /i put
dup 40 /s put
dup 41 /o put
dup 42 /M put
dup 43 /n put
dup 44 /l put
dup 45 /t put
dup 46 /h put
dup 47 /c put
dup 48 /space put
dup 49 /O put
dup 50 /S put
dup 51 /k put
dup 52 /A put
dup 53 /period put
dup 54 /C put
dup 55 /a put
dup 56 /f put
dup 57 /u put
dup 58 /I put
dup 59 /w put
dup 60 /m put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







00>] def
/CharStrings 29 dict dup begin
/.notdef 0 def
/space 1 def
/period 2 def
/A 3 def
/C 4 def
/H 5 def
/I 6 def
/M 7 def
/O 8 def
/S 9 def
/a 10 def
/c 11 def
/e 12 def
/f 13 def
/h 14 def
/i 15 def
/k 16 def
/l 17 def
/m 18 def
/n 19 def
/o 20 def
/p 21 def
/r 22 def
/s 23 def
/t 24 def
/u 25 def
/v 26 def
/w 27 def
/y 28 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4203806 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281EB5774DB918190B3555B2606F4B750EE48B979949E4A4AEEA98645E985E4A31E7F20BC966DCDABBD779392EB9556F86ECD124B854EAF0A963C9254B0C3A145F147C672C206E717A9B5425AC51098573E120B6306B6941F9833365623C47B3899038C9A48DCAEFD1D691C04E66779AD43C3126DEDB92BB307E150B0C618B1B40794EA89C941BC748C31ED4CC74A03CC94CE204748B3F319FAE01BB7DF87FD6BE0756E6FF606A502DFDC4AE0E2B2BC23B585ACE131174F3A0EDF7BE362B0B6B0093163E2837544E6714D904A7C2C83FEC1D67599D589F5F734746DB924A67A2D2877A7075A44D8668358AA51A0B71C2D6F2A8443A31F901A5DD46CAC0B4ABDD87DA6BFE6C630210E87F852BCED36B3CD2B69A49FD9573C3F5471782A89C225B4D45EBDCFDD977758FBED69FDC0ED7233817C88CB1087481DC85B7F14CFA68D9ED27A3BE242BD751FAED559F3FE291E487EE2E784735E36D31DC070083B19241A22C5D992D8437873CC5B006442C98AE9014A5CD43AE4C83E51A746A53A5CDC1F438046BED349D95531B76079D55EE1F69A3E15B65F2ACF38EB0B0E425AADF1DA3C6D1B9865C55431736E32396EA7BC277D0937650CCD7467539BA2F6086AC9FFF03D5A562AAF70B8FC8D95692141FBA2D711043BB2DCC8EA828052AB7F630ECF8BFECDCE90A2590A76ABE3EA3EA147EFA74D8B1F8CE53B36D9B142F95EB34CD192519D2F7D29631A2965FB8D841A1B85F9574B3A034A4AE65E459B9FAAE2ED91AE92F8A0
12E7BBBAE0E75580D24649E41E714BF936161D5DA23E02517197F2966DADCE966D6288DB51B48ED6151D3C7F91A919C362DC1787825CC5CDB41E9E1B99560315DA6C85B71629B120948D79F2E9530E9F7E7EBE8CF66CB17C8FF65A4D096D3F591CDFE1D0BE1155037B5C29BA768A8596C12263014A7CFABC1751D5BEF166B76C572F232E3C628FB17899F4E115588AB2E3D39EEEF31634804C883AD43132C95A5C3E92D064FEA90A3D9D49D9E22F63F9181404D8E2A02FE06BC5AA3CCFC4422E615AC5F5E925BA0CC1AAACEFB0B9F8CB6C0C6FA85B21071C04F88904FC144345742DD984302ACF76EB2C4C2979456676593B3D639C85E10BA236D3943FE943915E90497CFD3C3212DCCC947346F3DD7A51AFD55350410139214E5C3F9C4AA5247E3663B885DD93CE4A95871B2700B5025EA73A22C6A16E51B885C4EEF7079B84E100CA59BB397D90C8ADFA1A7D8700D83559F1857B783655D06A6A6AAE1DBD27269FB750850E9D3F1B57FAED058FFCFEA0F9A783247C2AB9E4074C8B4D67CDBEAD2878A90B20A0BA068ACC2A227D8072596C08C92021307E387A89ADED58A622F4ABF0845ECDC001D6BD3A8F068AE6F0A80871AD37A757BD0519985BCAAC461A407073398A5B4B550F6FFE9A2C997982B5BA6900AD14B2A83C1CFF2CCBA074E0F82057CA1131214F36EA1579B034DFD1F8A6391B5BFE8A382AAF80BA08167AE74AFBE6806B5D7F2A14CC80E276C554BACC17B64A0AC6B8D2C4C159D7EFB9CA54657401F142FA40A8B56D87CA17B3E602E643AAD99CA38EAC6F2B0579361C71B2102880626EC637C74E902B45D4FA5C7B2A7848F9A403D1DE412D80E6F6D45007447F8F4F07160FCCA118043E6D6726B8772455D868162FC9B53FF35E95B97EF774AFEAF65C9ADB546CC7D655499D2BA055256CE1898DD5FE917291C4D34715A5F9732CAA96C5E0966453842ED1468CFDC2B4F008ABFD270D224939CDF28FF53A2766DAAB49BA3E9EA07C23E3B8971552F80F63D23A948D7CA034310F171BF54FEE0105460F84BDD377D8F91C96DE9A3A0DF7D88630D501F6D38578567D18F026D6D95D1B12BC1F9E59806C5304F1D9CCD8C0EA11C51685941D39E85FDD566B4208AE7843A8D78E8052788E156EB4B98F02FEB16306AE93F88D0031681F10BB0B6F753D453A421B00F3E405F404C583ABA4470DFCFF3E737975C0CE3DECC6AD6496C9CBC5A2605BE8D82EFD98D3D32253D646A9A5614C1B5C9729EBC82C7991D4D5F1063FBC27539F18085C43587617426ABD77E0DABD0A38BBC13D0EB8C6CA8670E72F49576BCB4571D05DA6EDC0123448E0D343406D881CB9876C187C3055BE2D2DBC817D520728F5C897BE4914EA18BB4E5C89B9F95D2F593E109D87037A685B516B0CE1519A6F8BE75BE98FF6E8AA59B778E7332FE19C7904CC799B479EB4

62DE323E8076E71B736B71E0D51F8B8FABF2C920DD0ABDC1FAA43FCC5327AB94377E7C3AB82F89F8CFA492BC387A1703D59B191D6D5E9A158C434BACC4C344D688077C3966B5CDE80AC08D9E331D8E6AE6B59F1491B76FDCA6F95D5E0501BF5555F5CBAE6F78D5B1C09F0C7CC0268A600EC64DB137EFB2D779E1067AC854F30C3EB3854EB77DB048974EE126B3BF6AD7D8FE178261CF3514257908A91A488729E47BA56D18B4107ECA0D9913827A838A7AF2C03D9C9B7BB466F11B8893C4183BA0E38032D5453D59EC25012C141DF42969D853EC3CE9DA7B0D3D5A7171C3E9D2A3C53BCC9D4E650782F1B33F77AEEB396801C42AD25F628403C452607CCB6A727759ADE701EE0FDB62868E97C239B34B3B4E419A716703204F9696DDD1E46CAF5C2A2CCEC78AC27EA33C862913D781F8A566835FB43153ABF6F1FC8DDA0E5CADE3A9586BC3465B70771FFA0782A8F7A5A61F51EA1E2E11DCD200AD91779EE90C2AC9F9C7ABCBC7259F8288E9CAD77EF8639129857EA5ECF974381BF52A66BA5751B7D07BB8621353D3AA1B0A5ABE9E0AF12798286BC5B66AC044F792ADA6DBF770E5EEB33BC0541439A82CCAAB452D5FCAFD08438CE492E21EAC3D35CBB887CAF2940076D27C08C018E9C7D59D5CE56686D6B0F389747FBC40073EE5ACE0CC64273313D863112FC9999349E8A92447F3B7EB44840A41F66D38636B9100C274266D915E436C4CF1786D8E07435CFC42802E584937E135EB32535317C4AB7F899FE2A217467161C4ACAFFD880BB31E4BD8FBF6BDB72D4D67575A9C2725F269E686B17E11CDD84AFDA4EC1C9E77457477F989E254E2A3CA38791741EC74A0141D453839F6E0EEFFB36F410BD58C56ACAA24A8D181BC4BA7C81B8253FA50AD4C215497B7F9B73E4F7B7653E203F9A45BA8F28E605C61C08A566D72CD3917DB2299E11FD649D4BD206787D3C56B4F92DDC82F698554DEDF86F71419BEEEF9B2C1B1CD7EAD1DBDFC43C83FDB9EB665F799735E4476E38C6F4C0DF1831C88102C2A25E8EBDB32B6B653CFE8D3FF6E396D90D7558356F2FA805333734A55E6845057F6745D1AF0FC883B282951BDA25C91EC2C5AF7BA7175D96FF9713AC937994F67822C54BA4ECBB52A527287B8419005B153B2D7CE2F466F8582DF965F8A6D937B6B6D67C7745F40DF92D95F53EE4918B4A0D76A351F3526C517FF816401257D460FE34932ABC7BCB02C420AA880F3D7C959CD410F1EC109C0D9D5DA74B4E9ECD424F96BFD6C1A1FD5F9E1C96E9C4A3C0829F6065227E469E81787D80808E2869DFDC803882F4EDA5D1286EEAEA0014251CD682D021C4A0253E6AB998AECEC689921DAB63BB0C38B6CEFB215E8AF594E791072BF86842E6507003760C1116F5ACFB173003CB476480759EF312330F87FE190F178EEFC5C9EC3481C273F2E42B60CDAF4
BBBBA8A6A4CD966FA2BE095190B67B62C5F2A6F279C41DFB7930357FD260BABE09D8B36CBFF3B42D998128EB76E80E8FB90DADCEE6D773FFBB82D42B525ECE3BC95C55640C31B38573677715797BF04B3B85562BD043EAE4462F068E8EC0CEFBC808A1BE8DC43A4007B2567866754534463F4D4748DB6282A1209F70F5D853B58C411D1F9EECA0756B8B86BC0684D742F01E169B1584745864B04C0B1A91EB31AFFF0825B9E3897CEB21144662F468E62292C54DB87EDBFC08E72AE4DDB82A9F997650AD0AB9778C1139DD7FFA30D76A1387F1331C1703FCE7C8AB706E2BD127E32DFC18BBB361CB69F0904240D9756FB339ECFE1A9ABF9BF9B428155CE9C1C52A4EAC657E18F4B3866B1CED7635B9921F617B920CD3D909C89D1CFBF25410DD0234B0E9C7E5FA792486A90BAD2A0702D2862490A2DB535B69AA3133FF22D5CF240FE9B46F757C72BEC71FEADB3B9843180DFC0B55000B7EEA5285EA5F5648B46BBFD6920DABD2B64B56C625B911F2DBC51343D37401AC0EBB60F42F4B8453C3B60353EF44BE1212A70BB26E166B76AC0443A45C83A06482B203C53A82FA15DE5780B85188FEB9825F34ED9CB523C4538231BC0A8A5A126EE24FADB3953B5C56A18921C7B4B98688342B6467FD3D3F0C132E968F8AB64BFFEBD041D625A8F7F19506DAA6EA609B63A242552C891028AF5ED740545393425196E96486624663C8279789C5279BB76AD46C789A1C02A785E8A7D8966332B2DA0A864A3BAA33DB5B26FFB41647A28563A5522667987D8FF811AA252FD7BAB074D7483AA4621DA50DCF262CC6F9E0D0387F362E29242A205D38AE4C3F205B7F3189FB923EB984BC9AA8216A83E209B2D7F880DB20F4AFEBFF08BDAD152462CADF9E852FDA7113F8A822421AA2665CD62DA8A90F1C14031232E36CCDF50404E459C67E6D773D9B8ED380DF840EED7D95FACF6FD152D5B21A5D1CDFFC30F202A7E90610DE2064F1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 656 283 rc
-196 414 m
1353 414 l
1353 -520 l
-196 -520 l
h
-196 414 m
f
0.64705884 0.64705884 0.64705884 sc
2.4251957 59.669292 m
399.27557 59.669292 l
399.27557 2.9763803 l
2.4251957 2.9763803 l
h
2.4251957 59.669292 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
198.4252 354.33072 m
595.27557 354.33072 l
595.27557 411.02362 l
198.4252 411.02362 l
h
198.4252 354.33072 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 200.85039 31.322838 cm
/F1.1[ 30 0 0 -30 0 0]sf
-72.209999 11.080002 m
(!"#$%&'\(\)%)[ 21.660000 15.000000 17.790000 16.110000 9.990000 15.000000 6.660000 15.000000 17.220000 0.000000 ] xS
/Cs1 SC
0.85490197 0.85490197 0.85490197 sc
CM
2.4251957 158.8819 m
399.27557 158.8819 l
399.27557 73.842522 l
2.4251957 73.842522 l
h
2.4251957 158.8819 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
198.4252 255.1181 m
595.27557 255.1181 l
595.27557 340.15747 l
198.4252 340.15747 l
h
198.4252 255.1181 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 200.85039 116.36221 cm
-140.02499 11.080002 m
(*\)+\),'-.'/01203$%+$,)[ 26.130000 17.220000 16.680000 17.220000 6.660000 6.660000 9.450000 16.680000 6.660000 16.110000 8.340000 22.800000 19.440000 8.340000 15.570000 16.110000 10.530000 16.680000 16.110000 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -196 414 cm
252.28346 204.09448 m
252.28346 253.55669 l
S
0 J
0 j
0 i
252.28346 263.15668 m
252.28346 253.55669 l
255.88347 253.55669 m
252.28346 263.15668 l
248.68346 253.55669 l
S
1 J
1 j
0.60000002 i
331.65353 227.56772 m
331.65353 266.4567 l
S
0 i
CM
135.65353 192.43228 m
132.05354 182.83229 l
135.65353 186.43228 l
135.65353 186.43228 l
139.25354 182.83229 l
h
135.65353 192.43228 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
331.65353 221.56772 m
328.05353 231.16771 l
331.65353 227.56772 l
331.65353 227.56772 l
335.25354 231.16771 l
h
331.65353 221.56772 m
S
1 1 1 sc
CM
35.763779 280.77167 m
161.84251 280.77167 l
173.99278 280.77167 183.84251 270.92191 183.84251 258.77167 c
183.84251 217.73228 l
183.84251 205.58202 173.99278 195.73228 161.84251 195.73228 c
35.763779 195.73228 l
23.613514 195.73228 13.763779 205.58202 13.763779 217.73228 c
13.763779 258.77167 l
13.763779 270.92191 23.613514 280.77167 35.763779 280.77167 c
h
35.763779 280.77167 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
231.76378 133.22835 m
357.84253 133.22835 l
369.99277 133.22835 379.84253 143.07808 379.84253 155.22835 c
379.84253 196.26772 l
379.84253 208.41798 369.99277 218.26772 357.84253 218.26772 c
231.76378 218.26772 l
219.61351 218.26772 209.76378 208.41798 209.76378 196.26772 c
209.76378 155.22835 l
209.76378 143.07808 219.61351 133.22835 231.76378 133.22835 c
h
231.76378 133.22835 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 98.803146 238.25197 cm
-31.68 11.080002 m
(4##5)[ 19.440000 17.790000 17.790000 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -196 414 cm
456.37796 204.09448 m
456.37796 253.55669 l
S
0 J
0 j
0 i
456.37796 263.15668 m
456.37796 253.55669 l
459.97794 253.55669 m
456.37796 263.15668 l
452.77795 253.55669 l
S
1 J
1 j
0.60000002 i
535.74805 227.56772 m
535.74805 266.4567 l
S
0 i
CM
339.74802 192.43228 m
336.14804 182.83229 l
339.74802 186.43228 l
339.74802 186.43228 l
343.34802 182.83229 l
h
339.74802 192.43228 m
f
0 J
0 j
1 0 0 -1 -196 414 cm
535.74805 221.56772 m
532.14801 231.16771 l
535.74805 227.56772 l
535.74805 227.56772 l
539.34802 231.16771 l
h
535.74805 221.56772 m
S
1 1 1 sc
CM
239.85826 280.77167 m
365.93701 280.77167 l
378.08728 280.77167 387.93701 270.92191 387.93701 258.77167 c
387.93701 217.73228 l
387.93701 205.58202 378.08728 195.73228 365.93701 195.73228 c
239.85826 195.73228 l
227.70801 195.73228 217.85826 205.58202 217.85826 217.73228 c
217.85826 258.77167 l
217.85826 270.92191 227.70801 280.77167 239.85826 280.77167 c
h
239.85826 280.77167 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -196 414 cm
435.85828 133.22835 m
561.93701 133.22835 l
574.08728 133.22835 583.93701 143.07808 583.93701 155.22835 c
583.93701 196.26772 l
583.93701 208.41798 574.08728 218.26772 561.93701 218.26772 c
435.85828 218.26772 l
423.70801 218.26772 413.85828 208.41798 413.85828 196.26772 c
413.85828 155.22835 l
413.85828 143.07808 423.70801 133.22835 435.85828 133.22835 c
h
435.85828 133.22835 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 302.89764 238.25197 cm
-31.68 11.080002 m
(4##5)[ 19.440000 17.790000 17.790000 0.000000 ] xS
1 0 0 -1 531.77954 108.8504 cm
/F1.1[ 21 0 0 -21 0 0]sf
-119 -16.881996 m
(6\)+-7'+\(07,,0120)[ 15.162000 12.054000 11.676000 6.615000 11.277000 4.662000 11.676000 10.500000 5.838000 11.277000 4.662000 4.662000 5.838000 15.960000 13.608000 0.000000 ] xS
-119 7.7060013 m
(89+/-'\)+7,'-'$\(0$&$+)[ 6.216000 11.676000 11.676000 11.277000 6.615000 4.662000 12.054000 11.676000 11.277000 4.662000 4.662000 6.615000 4.662000 11.277000 10.500000 5.838000 11.277000 10.500000 11.277000 0.000000 ] xS
-119 32.293999 m
(9++$/$\(\(7%"08\)%0-.$07##\()[ 11.676000 11.676000 11.676000 11.277000 11.277000 11.277000 10.500000 10.500000 11.277000 6.993000 10.500000 5.838000 6.216000 12.054000 6.993000 5.838000 6.615000 11.676000 11.277000 5.838000 11.277000 12.453000 12.453000 0.000000 ] xS
1 0 0 -1 508.94489 200.22047 cm
-99 -4.5879974 m
(:+-$%7/-\(0;'-.0-.$012)[ 5.439000 11.676000 6.615000 11.277000 6.993000 11.277000 11.277000 6.615000 10.500000 5.838000 15.918000 4.662000 6.615000 11.676000 5.838000 6.615000 11.676000 11.277000 5.838000 15.960000 0.000000 ] xS
-99 20 m
(&'70\("\(-$<0/7,,\()[ 10.500000 4.662000 11.277000 5.838000 10.500000 10.500000 10.500000 6.615000 11.277000 17.913000 5.838000 11.277000 11.277000 4.662000 4.662000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
